<?php
/**
 * Implements hook_menu().
 */
function civicrm_autologin_menu() {

   $items = array();

   // Root URL of settings page.
   $items['admin/config/civicrm/autologin'] = array(
      'title' => 'Civicrm Auto Login URL settings',
      'description' => 'Settings page for Civicrm Auto Login URL',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
         'civicrm_autologin_settings'
      ) ,
      'access arguments' => array(
         'administer civicrm auto login url'
      ) ,
   );

   // Default tab.
   $items['admin/config/civicrm/autologin/settings'] = array(
      'title' => 'Civicrm Auto Login URL settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => - 10
   );

   return $items;
}

/**
 * Settings form for Civicrm Auto Login URL.
 *
 * @return object
 *   Form object.
 */
function civicrm_autologin_settings() {
   $form = array();
   $config = $this->config('civicrm_autologin.settings');

   $form['civicrm_autologin_entities'] = array(
      '#type' => 'fieldset',
      '#title' => t('Entité a présenter') ,
      '#description' => t('Entités a présenter') ,
   );

$form['civicrm_autologin_entities']['civicrm_autolgin_webforms'] = array(
      '#type' => 'checkbox',
      '#title' => t('Webforms.') ,
      '#default_value' => $config->get('civicrm_autolgin_webforms') ,
   );


$form['civicrm_autologin_entities']['civicrm_autolgin_views'] = array(
      '#type' => 'checkbox',
      '#title' => t('Views.') ,
      '#default_value' => $config->get('civicrm_autolgin_views') ,
   );


   $form['civicrm_autologin_url'] = array(
      '#type' => 'fieldset',
      '#title' => t('Format de l\'URL') ,
      '#description' => t('Format de l\'URL') ,
   );


$form['civicrm_autologin_url']['civicrm_autolgin_absurl'] = array(
      '#type' => 'checkbox',
      '#title' => t('Absolue.') ,
      '#default_value' => $config->get('civicrm_autolgin_absurl') ,
      '#description' => t('Absolue: inclu l\'adresse du site. Sinon, fournit juste le chemin de la page') ,
   );


   $form['civicrm_autologin_trace'] = array(
      '#type' => 'fieldset',
      '#title' => t('Trace') ,
      '#description' => t('Log des operations.') ,
   );


$form['civicrm_autologin_trace']['civicrm_autolgin_trace'] = array(
      '#type' => 'checkbox',
      '#title' => t('Log la créationdes URLS.') ,
      '#default_value' => $config->get('civicrm_autolgin_trace') ,
      '#description' => t('Log en base les URLS créées') ,
   );


$form['civicrm_autologin_trace']['civicrm_autolgin_debug'] = array(
      '#type' => 'checkbox',
      '#title' => t('Debug.') ,
      '#default_value' => $config->get('civicrm_autolgin_debug') ,
      '#description' => t('Log en base des informations de debug') ,
   );


   $form = system_settings_form($form);
   $form['#submit'][] = 'civicrm_autologin_settings_submit';

   return $form;
}

/**
 * Submit handler for the admin settings form.
 */
function civicrm_autologin_settings_submit($form, &$form_state) {
   // Reload hook_menu cache.
   \Drupal::service('router.builder')->rebuild();
}

function civicrm_autologin_civicrm_tokens(&$tokens) {
   $tokens['username'] = array(
      'username.drupal' => 'Drupal username'
   );
   $config = \Drupal::config('civicrm_autologin.settings');

   $config_civi = CRM_Core_Config::singleton();
   if ($config_civi
      ->userSystem
      ->is_drupal) {
      if ( \Drupal::moduleHandler()->moduleExists("auto_login_url")) {
         $list_tokens = array();
         $list_tokens['aluc.page_front'] = 'Autologin to front page :: Autologin';
         $list_tokens['aluc.base_site'] = 'Site to connect to :: Autologin';

         $tokens['aluc'] =  $list_tokens;
         $list_tokens = array();


         if ($config->get('webforms')) {
            $query = \Drupal::entityQuery('webform');
            if ($config->get('webform_open') == TRUE) {
               $query->condition('status', 'open');
            }
               // ->condition('category', '')
            $webforms=$query->execute();
            $b=\Drupal::entityTypeManager()->getStorage('webform');
            $c=$b->loadMultiple($webforms);

            foreach ($c as $webform) {
               // $list_tokens["autologin.webform_" . urlencode($webform->url())] = $webform->get('title') . " :: Autologin Webforms";
               $list_tokens["aluc_wf." . $webform->id()] = $webform->get('title') . " :: Autologin Webforms";
            }
            $tokens['aluc_wf']  = $list_tokens;
            $list_tokens = array();
         }


         if ($config->get('webform_submission')) {
            $webforms_sub = \Drupal::entityQuery('webform_submission')->execute();
            // $b=\Drupal::entityTypeManager()->getStorage('webform_submission');
            // $c=$b->loadMultiple($webforms_sub);

            $open_only = $config->get('webform_submission_open');
            foreach ($webforms_sub as $webform_sub) {
               $wfr = \Drupal::entityTypeManager()->getStorage('webform_submission')
                     ->load($webform_sub);
                     // ->getWebform();
               $a=\Drupal::entityTypeManager()->getStorage('webform_submission')
                     ->load($webform_sub);
               if ((($open_only) && $wfr->getWebform()->status()) || (! $open_only)) { //Webform opened ?
                  $list_tokens["aluc_wfs." . $wfr->id()] = $wfr->getWebform()->get('title') . " :: Autologin Webforms Submission";
               }
            }
            $tokens['aluc_wfs']  = $list_tokens;
            $list_tokens = array();
         }




         if ($config->get('views')) {
            $query = \Drupal::entityQuery('view');
            $or_cond = $query->orConditionGroup();
            if ($config->get('view_filter')) {
               foreach ($config->get('view_tags') as $key) {
                  $or_cond->condition('tag', $key, 'CONTAINS');
               }
               //   ->condition('tag', 'default')
               $query->condition($or_cond);
            }
            $views=$query->execute();
            $b=\Drupal::entityTypeManager()->getStorage('view');
            $c=$b->loadMultiple($views);

            foreach ($c as $view) {
               foreach ($view->get('display') as $disp) {
                  // $list_tokens["autologin.view_" . $view->get('id') . '$' . $disp['id']] = $view->get('label') . ":" . $disp['display_title'] . " :: Autologin View";
                  if (isset($disp['display_options']['path'])) {
                     $list_tokens["aluc_view." . $view->get('id') . '_S_E_P_' . $disp['id']] = $view->get('label') . ":" . $disp['display_title'] . " :: Autologin View";
                  }
               }
            }
            $tokens['aluc_view']  = $list_tokens;
         }

         // $tokens['autologin'] = $list_tokens;
      }
   }

}

function civicrm_autologin_civicrm_tokenValues(&$values, $cids, $job = null, $tokens = array() , $context = null) {
    $config = \Drupal::config('civicrm_autologin.settings');

   $debug = $config->get('debug');

   if ($debug) {
      \Drupal::logger('civicrm_autologin_tokenValues')->notice('values: @values, cids: @cids, tokens: @tokens, job: @job, context: @context', array(
         '@values' => print_r($values, true) ,
         '@cids' => print_r($cids, true) ,
         '@tokens' => print_r($tokens, true) ,
         '@job' => print_r($job, true) ,
         '@context' => print_r($context, true)
      ));
   }

   if (count(preg_grep('(aluc|username)', array_keys($tokens)))) {
      $civicrm = \Drupal::service('civicrm');
      global $base_url;
      // base_url peut contenir un chemin, en particulier les batchs Civicrm
      $r = parse_url($base_url);
      // recontruit juste l'URL du site
      $site_url = $r['scheme'] . '://' . $r['host'] . (!empty($r['port']) ? ':'.$r['port'] : '');

      $trace = $config->get('civicrm_autolgin_trace');


      foreach ($cids as $cid) {
         $params = array(
            'version' => 3,
            'sequential' => 1,
            'contact_id' => $cid
         );
         // TODO : Check error if duplicate e-email!!
         $result = civicrm_api('UFMatch', 'get', $params);
         if (!$result['is_error'] && isset($result['values'][0]['uf_id'])) {
            $drupalinfo = \Drupal::entityTypeManager()->getStorage('user')->load($result['values'][0]['uf_id']);

            if ($debug) {
               \Drupal::logger('civicrm_autologin(0)')->notice('values: @values, cid: @cid, tokens: @tokens, params: @params, result: @result, drupal id: @drupalinfo ', array(
                  '@values' => print_r($values, true) ,
                  '@cid' => print_r($cid, true) ,
                  '@tokens' => print_r($tokens, true) ,
                  '@params' => print_r($params, true) ,
                  '@result' => print_r($result, true) ,
                  '@drupalinfo' => $drupalinfo->id()
               ));
            }

            # uf_id does not exist
            if ($drupalinfo === null) {
               \Drupal::logger('civicrm_autologin')->error("Contact_id " . $cid . ", uf_id " . $result['values'][0]['uf_id'] . " don't exist. Mail not send");
               # Remove this from mailing
               unset($values[$cid]);
               continue;
            }
            foreach (preg_grep('(aluc|username)', array_keys($tokens)) as $tok_key) {
               foreach ($tokens[$tok_key] as $tmp_key => $cur_token_raw) {
                  $url = '';
                  // CiviCRM is buggy here, if token is being used in CiviMail, we need to use the key
                  // as the token. Otherwise ( PDF Letter, one-off email, etc) we
                  // need to use the value.
                  // Thanks to  sgladstone for her comments in fancytoken code !!!
                  $cur_token = '';
                  if (is_numeric($tmp_key)) {
                     $cur_token = $cur_token_raw;
                  }
                  else {
                     // Its being used by CiviMail.
                     $cur_token = $tmp_key;
                  }
                  if ($tok_key === "aluc_view") {
                     list($view,$display)=explode('_S_E_P_', $tmp_key);
                     $url = '/' . \Drupal::entityTypeManager()->getStorage('view')
                     ->load(current(\Drupal::entityQuery('view')->condition('id', $view)->execute()))
                     ->get('display')[$display]['display_options']['path'];
                  }
                  else if ($tok_key == 'aluc_wf') {
                     $url = \Drupal::entityTypeManager()->getStorage('webform')
                     ->load(current(\Drupal::entityQuery('webform')->condition('id', $tmp_key)->execute()))
                     ->toUrl()->toString();
                  }
                  else if ($tok_key == 'aluc_wfs') {
                     // $ssql = "SELECT sforms.sid FROM {webform_submissions} sforms where sforms.nid = $nid and
                     //   sforms.uid = $drupalinfo->uid order by sid desc limit 1";

                     // $sq_result = \Drupal::database()->query($ssql);
                     // $sid = $sq_result->fetchField();
                     // $url = "node/$nid/submission/$sid/edit";
                     $url=\Drupal::entityTypeManager()->getStorage('webform_submission')
                        ->load($tmp_key)->url();
                  }
                  else if ($tmp_key == 'page_front') {
                     $url = '/';
                  }
                  else if ($tmp_key == 'base_site') {
                     $values[$cid][$tok_key.'.'.$tmp_key] = $site_url . '/';
                     continue;
                  }
                  else if ($tmp_key == 'drupal') {
                     $values[$cid][$tok_key.'.'.$tmp_key] = $drupalinfo->getAccountName();
                     continue;
                  }
                  else {
                     // Unknonw token !!!
                     continue;
                  }

                  // $values[$cid][$tok_key.'.'.$tmp_key] = auto_login_url_create($drupalinfo->id(), $url, false);
                  $alu_service = \Drupal::service('auto_login_url.create');
                  $values[$cid][$tok_key.'.'.$tmp_key] = $alu_service->create($drupalinfo->id(), $url, false);
                  $aa = $values[$cid][$tok_key.'.'.$tmp_key];

                  if ($config->get('civicrm_autolgin_absurl')) {
                     $values[$cid][$tok_key.'.'.$tmp_key] = $site_url . '/' . $values[$cid][$tok_key.'.'.$tmp_key];
                  }


                  if ($trace) {
                     \Drupal::logger('civicrm_autologin')->notice(' cid: @cid, val: @val, url: @url, cur_token_raw: @cur_token_raw ', array(
                        '@cid' => $cid,
                        '@val' => $values[$cid][$tok_key.'.'.$tmp_key],
                        '@url' => $url,
                        '@cur_token_raw' => $cur_token_raw
                     ));
                  }
               }
            }
         }
      }
   }

}
?>
